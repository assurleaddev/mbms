# Updated expected output
help_task:
  description: >
    Use tools and your own general knowledge to answer this prompt: `{prompt}`
    Current year is {current_year}.

    IMPORTANT: You are a Swiss specialist. You MUST check if the prompt is about 
    Switzerland.
    - If the prompt is about Switzerland (e.g., "weather in Zurich", "restaurants in Geneva"), 
      answer it and use your tools.
    - If the prompt is about any other country or location (e.g., "weather in Paris", "Eiffel Tower"), 
      you MUST politely decline and state that you only handle requests for Switzerland.
    
    If the prompt asks for weather, use the `weather-get_daily` or 
    `weather-get_hourly` tools, but only for Swiss locations.
  expected_output: >
    A natural response in your own words.
    
    - If the request is for Switzerland: Provide the answer, coordinates, and weather.
    - If the request is NOT for Switzerland: A polite refusal, e.g., "I'm sorry, 
      I am a Swiss specialist and can only provide information about locations in Switzerland."

  agent: helpful_agent

# New task for GeoJSON 
geojson_enrichment_task:
  description: >
    Take the response from the previous task about: `{prompt}` and transform it into a structured format.
    
    Extract the following information:
    1. "text": The textual response that will be displayed to the user (clean, user-friendly format)
    2. "geojson": Valid GeoJSON FeatureCollection representing any geographic elements 
       mentioned in the response. ONLY include features that are in Switzerland.
    3. "weather": A text summary of any weather forecast information from the response.
    
    For the GeoJSON section:
    - Extract any locations, addresses, coordinates, etc. from the text.
    - CRITICAL: Only convert them to GeoJSON if they are located within Switzerland. 
      If a location is not in Switzerland, ignore it.
    - If no geographic data can be extracted (or if all data was non-Swiss), set geojson to null.
    
    For the Weather section:
    - If the response contains weather forecast data (for a Swiss location), extract it.
    - If no weather data is present, set weather to null.
    
  expected_output: >
    Intermediate structured response with text, geojson, and weather fields for further processing.
  agent: geojson_enrichment_agent
  context:
    - help_task

camera_choreography_task:
    description: >
        Take the structured response from the geojson_enrichment_task about: `{prompt}` and enhance it with choreographed map camera commands.
        
        Your job is to:
        1. Keep the existing "text", "geojson", and "weather" content from the previous task
        2. Add "map_commands": A list of MapCommand objects that will create a cinematic experience
        
        For the map_commands section:
        - Analyze the geographic content and create a logical sequence of camera movements and atmospheric effects
        - Use appropriate Mapbox GL JS commands: "flyTo", "easeTo", "jumpTo", "fitBounds", "setLights", "setFog", "setSnow", "setRain"
        - Start with atmospheric setup (lighting, weather) if contextually relevant
        - Then create camera movements with overview first if multiple locations involved
        - Progressive focus on specific areas of interest with appropriate environmental styling
        - Consider zoom levels: 1-5 (world), 6-9 (country/region), 10-14 (city), 14-19 (neighborhood), 20+ (building level)
        - Include smooth transitions with appropriate duration (3000ms for flyTo, 2000-6000ms for easeTo, for a slow tour even 15000+ can be great to keep it calm and smooth)
        - Set wait_for_completion: true for all commands to ensure sequential execution
        - Match atmospheric effects to geographic context (fog for coasts, weather for climate stories)
        - If no geographic content exists, set map_commands to null
        
        Example command structures:
        Camera: {"command": "flyTo", "params": {"center": [lng, lat], "zoom": 12, "duration": 2000, "bearing": 0, "pitch": 0}, "wait_for_completion": true}
        Lighting: {"command": "setLights", "params": {"preset": "dawn"}, "wait_for_completion": false}
        Fog: {"command": "setFog", "params": {"color": "rgb(186, 210, 235)", "high-color": "rgb(36, 92, 223)", "horizon-blend": 0.02, "range": [0.5, 10]}, "wait_for_completion": false}
        Weather: {"command": "setRain", "params": {"intensity": 0.5}, "wait_for_completion": false}
        
        Few notes on style:
        - Try to go slowly with camera movement, otherwise it is hard to admire the scene. I suggest durations of 3000ms and longer.
        - Try to be creative with combinations of commands, maybe even unpredictable!
        - Do not rely on directions requests to create a camera route as we can fly around without following the road network precisely.
        - Try to come up with key waypoints for any complex camera work, at each of them we could change pitch zoom too.
        - Try to end with a zoomed out view oriented to north, unless user's prompt implies they want something else
        - It is best not to draw polygons and zoom into them as the overlap between buildings and polygons close up does not look very clear, but user has a final say!

        The final output will use the LocationResponse Pydantic model.
    expected_output: >
        Final structured response using LocationResponse model containing text, geojson, weather, and map_commands fields. The map_commands should create a choreographed viewing experience that enhances the geographic narrative.
    agent: camera_choreographer_agent
    context:
        - geojson_enrichment_task